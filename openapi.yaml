openapi: "3.1.3"
info:
  title: Football Video API
  version: "1.0.0"
  description: API for fetching football videos by categories and date ranges.
servers:
  - url: https://streamd-a2v8.onrender.com/api

paths:
  /videos:
    get:
      summary: Get all videos
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 10, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [ASC, DESC], default: DESC }
      responses:
        "200":
          description: List of all videos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedVideos"
              examples:
                success:
                  value:
                    data:
                      - id: 101
                        title: "Arsenal vs Chelsea — Highlights"
                        thumbnail: "https://cdn.example.com/t/101.jpg"
                        category: "Highlights"
                        match_date: "2025-02-01T19:45:00Z"
                      - id: 102
                        title: "Liverpool vs City — Goals"
                        thumbnail: null
                        category: "Goals"
                        match_date: "2025-02-01T16:30:00Z"
                    meta:
                      total_items: 200
                      page: 1
                      pageSize: 10
                      total_pages: 20
                      has_previous: false
                      has_next: true
                      previous_page: null
                      next_page: 2
        "400":
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Invalid 'page' parameter. Must be a positive integer."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Unexpected database error."

  /videos/category/{categoryName}:
    get:
      summary: Get videos by category
      parameters:
        - in: path
          name: categoryName
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 10, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [ASC, DESC], default: DESC }
      responses:
        "200":
          description: List of videos in a category (200 with empty list if category has no items)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedVideos"
              examples:
                success:
                  value:
                    data:
                      - id: 77
                        title: "Barcelona vs Real — Highlights"
                        thumbnail: "https://cdn.example.com/t/77.jpg"
                        category: "Highlights"
                        match_date: "2025-01-20T20:00:00Z"
                    meta:
                      total_items: 1
                      page: 1
                      pageSize: 10
                      total_pages: 1
                      has_previous: false
                      has_next: false
                      previous_page: null
                      next_page: null
        "400":
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Invalid 'page' parameter. Must be a positive integer."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Unexpected database error."

  /videos/category/{categoryName}/date/{filter}:
   get:
    summary: Get videos by category and date filter (deprecated)
    description: >
      ⚠️ Deprecated — use **`/videos/category/{categoryName}/date`** with either:  
      - `day=yesterday|today|tomorrow`, or  
      - `from` / `to` query params for a date range.  
      
      This endpoint will be removed in a future release.
    deprecated: true
    parameters:
      - in: path
        name: categoryName
        required: true
        schema: { type: string }
      - in: path
        name: filter
        required: true
        schema:
          type: string
          enum: [yesterday, today, tomorrow]
      - in: query
        name: tz
        description: IANA timezone (used to calculate the filter window)
        schema: { type: string, default: Africa/Lagos }
      - in: query
        name: page
        schema: { type: integer, default: 1, minimum: 1 }
      - in: query
        name: pageSize
        schema: { type: integer, default: 10, minimum: 1 }
      - in: query
        name: sort
        schema: { type: string, enum: [ASC, DESC], default: DESC }
    responses:
      "200":
        description: Videos in category with date filter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaginatedVideos"
      "400":
        description: Invalid date filter or query params
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
            example:
              error: "Filter must be one of [yesterday, today, tomorrow]."

  /videos/category/{categoryName}/date:
   get:
    summary: Get videos by category and date filter or range
    description: >
      Fetch videos in a category using **one** of the following filter modes (mutually exclusive):  
      
      - **Keyword filter** via `day=yesterday|today|tomorrow`, OR  
      - **Date range** via `from` and `to` query params.  
      
      Rules:  
      - If `day` is provided, `from`/`to` must not be provided.  
      - If `from` is provided without `to`, the default `to` is the **end of the current day** in the requested timezone.  
      - Dates may be passed in `yyyy-MM-dd` or `dd-MM-yyyy` format.  
      - All dates are normalized to full-day windows:  
        - `from` → 00:00:00 (midnight start of day)  
        - `to` → 23:59:59 (end of day).  
    parameters:
      - in: path
        name: categoryName
        required: true
        schema:
          type: string
      - in: query
        name: day
        description: Keyword filter for a single day (mutually exclusive with `from`/`to`)
        schema:
          type: string
          enum: [yesterday, today, tomorrow]
      - in: query
        name: from
        description: >
         Start date (inclusive). Formats: `yyyy-MM-dd` or `dd-MM-yyyy`. Mutually exclusive with `day`.
        schema:
          type: string
          format: date
      - in: query
        name: to
        description: >
          End date (inclusive, normalized to end-of-day). Formats: `yyyy-MM-dd` or `dd-MM-yyyy`.  
          If omitted, defaults to the end of the current day. Mutually exclusive with `day`.
        schema:
          type: string
          format: date
      - in: query
        name: tz
        description: IANA timezone (used for keyword filters and normalization). Defaults to Africa/Lagos.
        schema:
          type: string
          default: Africa/Lagos
      - in: query
        name: page
        schema:
          type: integer
          default: 1
          minimum: 1
      - in: query
        name: pageSize
        schema:
          type: integer
          default: 10
          minimum: 1
      - in: query
        name: sort
        schema:
          type: string
          enum: [ASC, DESC]
          default: DESC
    responses:
      "200":
        description: Videos in category within specified date filter or range
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaginatedVideos"
            examples:
              success-keyword:
                summary: Fetch using keyword filter
                value:
                  data:
                    - id: 123
                      title: "Chelsea vs Arsenal — Highlights"
                      thumbnail: "https://cdn.example.com/t/123.jpg"
                      category: "Highlights"
                      match_date: "2025-09-03T19:45:00Z"
                  meta:
                    total_items: 2
                    page: 1
                    pageSize: 10
                    total_pages: 1
              success-range:
                summary: Fetch using date range
                value:
                  data:
                    - id: 55
                      title: "PSG vs Monaco — Highlights"
                      thumbnail: "https://cdn.example.com/t/55.jpg"
                      category: "Highlights"
                      match_date: "2025-01-15T21:00:00Z"
                  meta:
                    total_items: 4
                    page: 1
                    pageSize: 10
                    total_pages: 1
      "400":
        description: Invalid date filter or query params
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
            examples:
              invalid-day:
                value: { error: "Invalid 'day'. Use yesterday|today|tomorrow." }
              invalid-range:
                value: { error: "Invalid 'from' or 'to' format. Use yyyy-MM-dd or dd-MM-yyyy." }
              missing-range:
                value: { error: "Provide either day=yesterday|today|tomorrow OR from/to query params." }
              mixed-filters:
                value: { error: "Use either 'day' OR 'from/to', not both." }
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
            example:
              error: "Unexpected database error."

  /videos/date:
    get:
      summary: Get videos by date range
      parameters:
        - in: query
          name: from
          required: true
          schema: { type: string, format: date }
        - in: query
          name: to
          required: true
          schema: { type: string, format: date }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 10, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [ASC, DESC], default: DESC }
      responses:
        "200":
          description: Videos within date range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedVideos"
              examples:
                success:
                  value:
                    data:
                      - id: 88
                        title: "Napoli vs Inter — Goals"
                        thumbnail: null
                        category: "Goals"
                        match_date: "2025-02-02T18:00:00Z"
                    meta:
                      total_items: 12
                      page: 2
                      pageSize: 10
                      total_pages: 2
                      has_previous: true
                      has_next: false
                      previous_page: 1
                      next_page: null
        "400":
          description: Invalid date range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Missing 'from' or 'to' query params."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Unexpected database error."

  /videos/{id}:
    get:
      summary: Get a video by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200":
          description: A single video
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Video"
              examples:
                success:
                  value:
                    data:
                      id: 101
                      title: "Arsenal vs Chelsea — Highlights"
                      thumbnail: "https://cdn.example.com/t/101.jpg"
                      category: "Highlights"
                      match_date: "2025-02-01T19:45:00Z"
        "400":
          description: Invalid video ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Invalid 'id' parameter. Must be an integer."
        "404":
          description: Video not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Video not found"
  /videos/recent:
    get:
      summary: Get recent highlights (last 3 days)
      description: Fetch football highlight videos from the past 3 days, ordered by match date.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
          description: Sort order by match date
      responses:
        "200":
          description: List of recent highlights
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        thumbnail:
                          type: string
                          nullable: true
                        category:
                          type: string
                        match_date:
                          type: string
                          format: date-time
                  metadata:
                    type: object
                    properties:
                      total_items:
                        type: integer
                      page:
                        type: integer
                      pageSize:
                        type: integer
                      total_pages:
                        type: integer
                      has_previous:
                        type: boolean
                      has_next:
                        type: boolean
                required: [data, metadata]
              examples:
                recentHighlights:
                  summary: Example with highlights
                  value:
                    data:
                      - id: 12
                        title: "Liverpool vs Chelsea Highlights"
                        thumbnail: "https://example.com/thumbs/liv-che.png"
                        category: "Premier League"
                        match_date: "2025-08-27T18:00:00Z"
                      - id: 13
                        title: "Real Madrid vs Barcelona Highlights"
                        thumbnail: "https://example.com/thumbs/el-clasico.png"
                        category: "La Liga"
                        match_date: "2025-08-26T20:00:00Z"
                    metadata:
                      total_items: 2
                      page: 1
                      pageSize: 10
                      total_pages: 1
                      has_previous: false
                      has_next: false
                emptyHighlights:
                  summary: Example with no highlights
                  value:
                    data: []
                    metadata:
                      total_items: 0
                      page: 1
                      pageSize: 10
                      total_pages: 0
                      has_previous: false
                      has_next: false
  /videos/{id}/related:
   get:
    summary: Get related videos by category
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
          default: 5
    responses:
      "200":
        description: Related videos
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/Video"
      "404":
        description: No related videos found
                    
              

  /categories:
    get:
      summary: Get all categories
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
              examples:
                success:
                  value:
                    data:
                      - id: 1
                        name: "Highlights"
                      - id: 2
                        name: "Goals"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Unexpected database error."
  /interactions/saved-matches:
    post:
      summary: Save a match for a subscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 55
      responses:
        "200":
          description: Match saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Match saved successfully."
                data: null
        "400":
          description: Missing subscriber_id or match_id
          content:
            application/json:
              example:
                success: false
                message: "subscriber_id is required"
                data: null
    delete:
      summary: Remove a saved match for a subscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 55
      responses:
        "200":
          description: Match removed from saved list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Match removed from saved."
                data: null
        "404":
          description: Match not found in saved list
          content:
            application/json:
              example:
                success: false
                message: "Saved match not found"
                data: null
    get:
      summary: List all saved matches for a subscriber
      parameters:
        - in: query
          name: subscriber_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of saved matches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Saved matches retrieved."
                data:
                  - id: 1
                    match_id: 55
                    subscriber_id: 101
                    created_at: "2025-08-01T10:00:00Z"
        "400":
          description: Missing subscriber_id
          content:
            application/json:
              example:
                success: false
                message: "subscriber_id is required"
                data: null

  /interactions/loved-matches:
    post:
      summary: Love a match for a subscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 77
      responses:
        "200":
          description: Match loved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Match loved successfully."
                data: null
        "400":
          description: Missing subscriber_id or match_id
          content:
            application/json:
              example:
                success: false
                message: "match_id is required"
                data: null
    delete:
      summary: Remove love (soft delete) for a match
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 77
      responses:
        "200":
          description: Love removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Love removed."
                data: null
        "404":
          description: Loved match not found
          content:
            application/json:
              example:
                success: false
                message: "Loved match not found"
                data: null
    get:
      summary: List all loved matches for a subscriber
      parameters:
        - in: query
          name: subscriber_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of loved matches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Loved matches retrieved."
                data:
                  - id: 1
                    match_id: 77
                    subscriber_id: 101
                    created_at: "2025-08-02T12:00:00Z"
                    deleted_at: null
        "400":
          description: Missing subscriber_id
          content:
            application/json:
              example:
                success: false
                message: "subscriber_id is required"
                data: null

  /interactions/favorite-matches:
    post:
      summary: Favorite a match for a subscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 99
      responses:
        "200":
          description: Match favorited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Match favorited successfully."
                data: null
        "400":
          description: Missing subscriber_id or match_id
          content:
            application/json:
              example:
                success: false
                message: "subscriber_id is required"
                data: null
    delete:
      summary: Remove a favorite match for a subscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionRequest"
            example:
              subscriber_id: 101
              match_id: 99
      responses:
        "200":
          description: Favorite removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Favorite removed."
                data: null
        "404":
          description: Favorite not found
          content:
            application/json:
              example:
                success: false
                message: "Favorite match not found"
                data: null
    get:
      summary: List all favorite matches for a subscriber
      parameters:
        - in: query
          name: subscriber_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of favorite matches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                message: "Favorite matches retrieved."
                data:
                  - id: 1
                    match_id: 99
                    subscriber_id: 101
                    created_at: "2025-08-03T14:00:00Z"
        "400":
          description: Missing subscriber_id
          content:
            application/json:
              example:
                success: false
                message: "subscriber_id is required"
                data: null

  /interactions/matches/{match_id}/stats:
    get:
      summary: Get stats (saved, loved, favorited counts) for a specific match
      parameters:
        - in: path
          name: match_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Stats for the given match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchStatsResponse"
              example:
                success: true
                message: "Stats for match 55 retrieved."
                data:
                  saved_count: 12
                  loved_count: 7
                  favorite_count: 5
        "404":
          description: Match not found
          content:
            application/json:
              example:
                success: false
                message: "Match not found"
                data: null

  /interactions/subscribers/{subscriber_id}/stats:
    get:
      summary: Get stats (saved, loved, favorited counts) for a specific subscriber
      parameters:
        - in: path
          name: subscriber_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Stats for the given subscriber
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberStatsResponse"
              example:
                success: true
                message: "Stats for subscriber 101 retrieved."
                data:
                  saved_count: 3
                  loved_count: 2
                  favorite_count: 1
        "404":
          description: Subscriber not found
          content:
            application/json:
              example:
                success: false
                message: "Subscriber not found"
                data: null

  /interactions/top:
   get:
    summary: Get top matches by most popular interaction type
    description: >
      Returns the top matches based on the interaction type 
      (favorite, loved, or saved) that currently has the highest overall count.  
      The API automatically decides the winner type and includes it in the response.
    responses:
      "200":
        description: Top matches for the most interacted type
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponse"
            example:
              success: true
              message: "Top 10 favorite matches retrieved successfully."
              data:
                type: "favorite"
                rows:
                  - match_id: 101
                    title: "Barcelona vs Real Madrid"
                    thumbnail: "https://cdn.example.com/thumbnails/match101.jpg"
                    match_date: "2025-05-10"
                    video_url: "https://cdn.example.com/videos/match101.mp4"
                    category: "Highlights"
                    league: "La Liga"
                    country: "Spain"
                    total: 42
                  - match_id: 99
                    title: "Arsenal vs Chelsea"
                    thumbnail: "https://cdn.example.com/thumbnails/match99.jpg"
                    match_date: "2025-04-20"
                    video_url: "https://cdn.example.com/videos/match99.mp4"
                    category: "Full Match"
                    league: "Premier League"
                    country: "England"
                    total: 38
      "500":
        description: Server error
        content:
          application/json:
            example:
              success: false
              message: "Database error while fetching top matches"
              data: null
  /auth/login:
    post:
      summary: Login or request subscription link
      description: >
        User enters MSISDN.  
        If already subscribed and active → grants access with session token.  
        Otherwise returns telco-specific subscription link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [msisdn]
              properties:
                msisdn:
                  type: string
                  example: "+2348012345678"
      responses:
        "200":
          description: Login success or subscription link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                ActiveSubscriber:
                  summary: Active subscriber
                  value:
                    success: true
                    message: "Access granted"
                    data:
                      status: active
                      msisdn: "2348012345678"
                      start_time: "2025-08-29T15:00:00.000Z"
                      end_time: "2025-08-30T15:00:00.000Z"
                      session_token: "123e4567-e89b-12d3-a456-426614174000"
                      session_expires_at: "2025-08-30T15:00:00.000Z"
                      is_first_time: false
                      remaining_seconds: 86350
                    server_time: "2025-08-29T16:42:15.123Z"
                NewSubscriber:
                  summary: New subscriber needs link
                  value:
                    success: true
                    message: "Subscription required"
                    data:
                      status: pending
                      carrier: MTN
                      subscription_link: "https://mtn.example.com/subscribe"
                      msisdn: "2348012345678"
                      is_first_time: true
                      remaining_seconds: 0
                    server_time: "2025-08-29T16:42:15.123Z"
        "400":
          description: Invalid request (bad MSISDN format, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Invalid MSISDN format"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Something went wrong"

  /auth/callback:
    get:
      summary: Telco callback after subscription
      description: >
        Telco redirects back with MSISDN and carrier.  
        Marks subscriber as active, creates session, and returns session token.
      parameters:
        - in: query
          name: msisdn
          schema:
            type: string
          required: true
          example: "2348012345678"
        - in: query
          name: carrier
          schema:
            type: string
          required: true
          example: "MTN"
      responses:
        "200":
          description: Subscription verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                message: "Subscription verified"
                data:
                  status: active
                  msisdn: "2348012345678"
                  start_time: "2025-08-29T15:00:00.000Z"
                  end_time: "2025-08-30T15:00:00.000Z"
                  session_token: "123e4567-e89b-12d3-a456-426614174000"
                  session_expires_at: "2025-08-30T15:00:00.000Z"
                  is_first_time: false
                  remaining_seconds: 86350
                server_time: "2025-08-29T16:43:00.000Z"
        "400":
          description: Missing query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Missing msisdn or carrier"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"

  /auth/status:
    get:
      summary: Check session and subscription status
      description: >
        Validates session token and returns subscription status + expiry times.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Status response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                ValidSession:
                  summary: Active subscription and session
                  value:
                    success: true
                    message: "Session valid"
                    data:
                      status: active
                      msisdn: "2348012345678"
                      start_time: "2025-08-29T15:00:00.000Z"
                      end_time: "2025-08-30T15:00:00.000Z"
                      session_token: "123e4567-e89b-12d3-a456-426614174000"
                      session_expires_at: "2025-08-30T15:00:00.000Z"
                      is_first_time: false
                      remaining_seconds: 7200
                    server_time: "2025-08-29T16:45:00.000Z"
                ExpiredSession:
                  summary: Expired subscription
                  value:
                    success: true
                    message: "Subscription expired"
                    data:
                      status: expired
                      msisdn: "2348012345678"
                      start_time: "2025-08-28T15:00:00.000Z"
                      end_time: "2025-08-29T15:00:00.000Z"
                      session_token: "123e4567-e89b-12d3-a456-426614174000"
                      session_expires_at: "2025-08-30T15:00:00.000Z"
                      is_first_time: false
                      remaining_seconds: 0
                    server_time: "2025-08-29T16:45:00.000Z"
        "401":
          description: Invalid or expired session token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Session expired"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"

  /auth/webhook:
    post:
      summary: Telco webhook subscription update
      description: >
        Receives subscription status updates directly from telco.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [msisdn, status]
              properties:
                msisdn:
                  type: string
                  example: "2348012345678"
                status:
                  type: string
                  enum: [active, expired, pending, cancelled]
                  example: "active"
      responses:
        "200":
          description: Webhook processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                message: "Subscriber updated via webhook"
                data:
                  status: active
                  msisdn: "2348012345678"
                  end_time: "2025-08-30T15:00:00.000Z"
                  remaining_seconds: 86350
                server_time: "2025-08-29T16:47:00.000Z"
        "400":
          description: Bad webhook payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Missing required fields"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"

  /auth/logout:
    post:
      summary: Logout subscriber
      description: >
        Invalidates the session token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                message: "Logged out successfully"
                data: {}
                server_time: "2025-08-29T16:49:00.000Z"
        "401":
          description: Invalid session token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"
              example:
                success: false
                message: "Invalid or expired session"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthErrorResponse"             
            

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID
  schemas:
    Video:
      type: object
      description: Lightweight video object returned by listing and detail endpoints.
      properties:
        id:
          type: integer
        title:
          type: string
        thumbnail:
          type: string
          nullable: true
        category:
          type: string
          description: Category name (joined from categories.name)
        match_date:
          type: string
          format: date-time
          description: Match kickoff datetime (from matches.date)
        league:            # NEW
          type: string
        country:           # NEW
          type: string
        video_url:         # NEW
          type: string  
      required: [id, title, category, match_date]

    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
      required: [id, name]

    PaginationMeta:
      type: object
      properties:
        total_items: { type: integer }
        page: { type: integer }
        pageSize: { type: integer }
        total_pages: { type: integer }
        has_previous: { type: boolean }
        has_next: { type: boolean }
        previous_page: { type: integer, nullable: true }
        next_page: { type: integer, nullable: true }
      required: [total_items, page, pageSize, total_pages, has_previous, has_next]

    PaginatedVideos:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Video"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
      required: [data, meta]

    Error:
      type: object
      properties:
        error: { type: string }
      required: [error] 

    InteractionRequest:
      type: object
      required:
        - subscriber_id
        - match_id
      properties:
        subscriber_id:
          type: integer
          description: ID of the subscriber
        match_id:
          type: integer
          description: ID of the match

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          nullable: true
          properties:
            type:
              type: string
              enum: [favorite, loved, saved]
              description: The winning interaction type
            rows:
              type: array
              items:
                $ref: "#/components/schemas/Match"

    Match:
      type: object
      properties:
        match_id:
          type: integer
        title:
          type: string
        thumbnail:
          type: string
          format: uri
        match_date:
          type: string
          format: date
        video_url:
          type: string
          format: uri
        category:
          type: string
        league:
          type: string
        country:
          type: string
        total:
          type: integer
          description: Total number of interactions of the winning type

    MatchStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            saved_count:
              type: integer
            loved_count:
              type: integer
            favorite_count:
              type: integer

    SubscriberStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            saved_count:
              type: integer
            loved_count:
              type: integer
            favorite_count:
              type: integer  
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Access granted"
        data:
          type: object
          additionalProperties: true
        server_time:
          type: string
          format: date-time
          example: "2025-08-29T16:42:15.123Z"

    AuthErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Something went wrong"          
